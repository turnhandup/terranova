<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <http auto-config="true" use-expressions="true" >

        <form-login

                login-page="/login"
                authentication-success-handler-ref="authSuccessHandler"
                default-target-url="/welcome"
                authentication-failure-url="/login?error"
                username-parameter="username"
                password-parameter="password" />
        <intercept-url pattern="/admin" access="hasRole('ADMIN')"/>
        <intercept-url pattern="/architector" access="hasRole('ARCHITECTOR')"/>




        <logout logout-success-url="/login?logout" />
        <!-- enable csrf protection -->
        <!--<csrf request-matcher-ref="myapp.services.convertors.CsrfSecurityRequestMatcher"/>-->
    </http>
    <beans:bean id="authSuccessHandler" class="myapp.controllers.rest.AuthSuccessHandler" />
    <beans:bean id="encoder" class="myapp.services.validators.MD5PasswordEncoder"/>
    <authentication-manager>
        <authentication-provider>
            <password-encoder ref="encoder"/>
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query=" SELECT login, password, enabled FROM users WHERE login = ? "
                               authorities-by-username-query=" SELECT  login, role FROM users WHERE  login = ? "

            />
        </authentication-provider>
    </authentication-manager>
</beans:beans>